/* ***************************************************************** */
/*                                                                   */
/* IBM Confidential                                                  */
/*                                                                   */
/* OCO Source Materials                                              */
/*                                                                   */
/* Copyright IBM Corp. 2013                                          */
/*                                                                   */
/* The source code for this program is not published or otherwise    */
/* divested of its trade secrets, irrespective of what has been      */
/* deposited with the U.S. Copyright Office.                         */
/*                                                                   */
/* ***************************************************************** */
package com.ibm.cio.audio;

import android.os.SystemClock;

import com.ibm.cio.opus.WebSocketWriter;
import com.ibm.cio.util.Logger;
import com.ibm.cio.vanisdk.VaniRecorderDelegate;
import com.sun.jna.ptr.PointerByReference;

import java.io.IOException;
import java.io.OutputStream;

// TODO: Auto-generated Javadoc

/**
 * JNI Speex encoder.
 */
abstract public class VaniJNAEnc implements VaniEncoder {
	// Use PROPRIETARY notice if class contains a main() method, otherwise use
	// COPYRIGHT notice.
	public static final String COPYRIGHT_NOTICE = "(c) Copyright IBM Corp. 2014";
	/** The Constant TAG. */
	protected String TAG = VaniJNAEnc.class.getName();

	protected WebSocketWriter writer = null; // TODO
    protected PointerByReference opusEncoder;
    protected int framesize = 160;
    protected int sampleRate = 16000;
    protected long compressDataTime = 0;
//	protected VaniOpusUploader client;
    protected VaniRecorderDelegate delegate = null;
	//
	public VaniJNAEnc() {
		Logger.i(TAG, "Construct VaniJNAEnc");
		this.compressDataTime = 0;
	}
	/* (non-Javadoc)
	 * @see com.ibm.cio.audio.VaniEncoder#initEncodeAndWriteHeader(java.io.OutputStream)
	 */
	public void initEncodeAndWriteHeader(OutputStream out){
//		writer = new WebSocketWriter();
//		writer.open(destSpxFile);
//		writer.writeHeader("Encoded with: " + JNAOpus.INSTANCE.opus_get_version_string());
	}
	/**
	 * For WebsocketClient
	 * @param client
	 * @throws java.io.IOException
	 */
	abstract public void initEncoderWithWebSocketClient(VaniWSUploader client) throws IOException;
	@Override
	public void writeChunk(byte[] data) throws IOException {
		long t0 = SystemClock.elapsedRealtime();
		writer.writePacket(data, 0, data.length);
		Logger.d(TAG, "writeChunk time: " + (SystemClock.elapsedRealtime() - t0));
	}
	@Override
	public byte[] encode(byte[] rawAudio){
        return rawAudio;
    }
	/* (non-Javadoc)
	 * @see com.ibm.cio.audio.VaniEncoder#encodeAndWrite(byte[])
	 */
	public int encodeAndWrite(byte[] rawAudio) throws IOException {
        if(this.delegate != null)
            this.delegate.onRecordingCompleted(rawAudio);
        return rawAudio.length;
	}

    protected void _onRecordingCompleted(byte[] rawAudioData){
		if(this.delegate != null) delegate.onRecordingCompleted(rawAudioData);
	}
	/* (non-Javadoc)
	 * @see com.ibm.cio.audio.VaniEncoder#close()
	 */
	public void close() {
        if(this.writer != null){
            try {
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
	}
	@Override
	public long getCompressionTime() {
		// TODO Auto-generated method stub
		return this.compressDataTime;
	}
	
	public void setDelegate(VaniRecorderDelegate obj){
		this.delegate = obj;
	}

}
